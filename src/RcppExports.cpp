// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_factorial
double rcpp_factorial(double n);
RcppExport SEXP _lamle_rcpp_factorial(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_factorial(n));
    return rcpp_result_gen;
END_RCPP
}
// find_row
int find_row(arma::mat cand_mat, arma::mat pool_mat);
RcppExport SEXP _lamle_find_row(SEXP cand_matSEXP, SEXP pool_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type cand_mat(cand_matSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type pool_mat(pool_matSEXP);
    rcpp_result_gen = Rcpp::wrap(find_row(cand_mat, pool_mat));
    return rcpp_result_gen;
END_RCPP
}
// FindUniqComb_jlmr_GLLVM
List FindUniqComb_jlmr_GLLVM(arma::mat loadmat, bool check_zero);
RcppExport SEXP _lamle_FindUniqComb_jlmr_GLLVM(SEXP loadmatSEXP, SEXP check_zeroSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type loadmat(loadmatSEXP);
    Rcpp::traits::input_parameter< bool >::type check_zero(check_zeroSEXP);
    rcpp_result_gen = Rcpp::wrap(FindUniqComb_jlmr_GLLVM(loadmat, check_zero));
    return rcpp_result_gen;
END_RCPP
}
// FindUniqComb_jlmrst_GLLVM
List FindUniqComb_jlmrst_GLLVM(arma::mat loadmat, bool check_zero);
RcppExport SEXP _lamle_FindUniqComb_jlmrst_GLLVM(SEXP loadmatSEXP, SEXP check_zeroSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type loadmat(loadmatSEXP);
    Rcpp::traits::input_parameter< bool >::type check_zero(check_zeroSEXP);
    rcpp_result_gen = Rcpp::wrap(FindUniqComb_jlmrst_GLLVM(loadmat, check_zero));
    return rcpp_result_gen;
END_RCPP
}
// gi
arma::vec gi(arma::vec z, arma::vec apars, arma::vec bpars, std::string modeltype, arma::uword mi, double y);
RcppExport SEXP _lamle_gi(SEXP zSEXP, SEXP aparsSEXP, SEXP bparsSEXP, SEXP modeltypeSEXP, SEXP miSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type apars(aparsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type bpars(bparsSEXP);
    Rcpp::traits::input_parameter< std::string >::type modeltype(modeltypeSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type mi(miSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(gi(z, apars, bpars, modeltype, mi, y));
    return rcpp_result_gen;
END_RCPP
}
// dgidz
arma::mat dgidz(arma::vec z, arma::vec apars, arma::vec bpars, std::string modeltype, arma::vec probs, arma::uword mi, arma::uword p, double y);
RcppExport SEXP _lamle_dgidz(SEXP zSEXP, SEXP aparsSEXP, SEXP bparsSEXP, SEXP modeltypeSEXP, SEXP probsSEXP, SEXP miSEXP, SEXP pSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type apars(aparsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type bpars(bparsSEXP);
    Rcpp::traits::input_parameter< std::string >::type modeltype(modeltypeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type mi(miSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(dgidz(z, apars, bpars, modeltype, probs, mi, p, y));
    return rcpp_result_gen;
END_RCPP
}
// optC
arma::vec optC(arma::vec start, double tol, arma::uword maxit, arma::vec y, arma::uword J, arma::vec cats, arma::uword p, Rcpp::List model, Rcpp::List modelpars, std::vector<std::string> modeltype, std::vector<std::string> link, std::vector<std::string> estimator, arma::vec mu, arma::mat invSigma);
RcppExport SEXP _lamle_optC(SEXP startSEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP ySEXP, SEXP JSEXP, SEXP catsSEXP, SEXP pSEXP, SEXP modelSEXP, SEXP modelparsSEXP, SEXP modeltypeSEXP, SEXP linkSEXP, SEXP estimatorSEXP, SEXP muSEXP, SEXP invSigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type start(startSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::uword >::type J(JSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type cats(catsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type model(modelSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type modelpars(modelparsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type modeltype(modeltypeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type link(linkSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type invSigma(invSigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(optC(start, tol, maxit, y, J, cats, p, model, modelpars, modeltype, link, estimator, mu, invSigma));
    return rcpp_result_gen;
END_RCPP
}
// infoC
arma::mat infoC(arma::vec start, double tol, arma::uword maxit, arma::vec y, arma::uword J, arma::vec cats, arma::uword p, Rcpp::List model, Rcpp::List modelpars, std::vector<std::string> modeltype, std::vector<std::string> link, std::vector<std::string> estimator, std::vector<std::string> information, arma::vec mu, arma::mat invSigma);
RcppExport SEXP _lamle_infoC(SEXP startSEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP ySEXP, SEXP JSEXP, SEXP catsSEXP, SEXP pSEXP, SEXP modelSEXP, SEXP modelparsSEXP, SEXP modeltypeSEXP, SEXP linkSEXP, SEXP estimatorSEXP, SEXP informationSEXP, SEXP muSEXP, SEXP invSigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type start(startSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::uword >::type J(JSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type cats(catsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type model(modelSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type modelpars(modelparsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type modeltype(modeltypeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type link(linkSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type estimator(estimatorSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type information(informationSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type invSigma(invSigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(infoC(start, tol, maxit, y, J, cats, p, model, modelpars, modeltype, link, estimator, information, mu, invSigma));
    return rcpp_result_gen;
END_RCPP
}
// hoptC
double hoptC(arma::vec theta, arma::vec y, arma::uword J, arma::vec cats, arma::uword p, Rcpp::List model, Rcpp::List modelpars, std::vector<std::string> modeltype, std::vector<std::string> link, arma::vec mu, arma::mat Sigma);
RcppExport SEXP _lamle_hoptC(SEXP thetaSEXP, SEXP ySEXP, SEXP JSEXP, SEXP catsSEXP, SEXP pSEXP, SEXP modelSEXP, SEXP modelparsSEXP, SEXP modeltypeSEXP, SEXP linkSEXP, SEXP muSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::uword >::type J(JSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type cats(catsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type model(modelSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type modelpars(modelparsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type modeltype(modeltypeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type link(linkSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(hoptC(theta, y, J, cats, p, model, modelpars, modeltype, link, mu, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// dhoptC
arma::vec dhoptC(arma::vec theta, arma::vec y, arma::uword J, arma::vec cats, arma::uword p, Rcpp::List model, Rcpp::List modelpars, std::vector<std::string> modeltype, std::vector<std::string> link, arma::vec mu, arma::mat Sigma);
RcppExport SEXP _lamle_dhoptC(SEXP thetaSEXP, SEXP ySEXP, SEXP JSEXP, SEXP catsSEXP, SEXP pSEXP, SEXP modelSEXP, SEXP modelparsSEXP, SEXP modeltypeSEXP, SEXP linkSEXP, SEXP muSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::uword >::type J(JSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type cats(catsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type model(modelSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type modelpars(modelparsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type modeltype(modeltypeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type link(linkSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(dhoptC(theta, y, J, cats, p, model, modelpars, modeltype, link, mu, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// mleoptC
double mleoptC(arma::vec theta, arma::vec y, arma::uword J, arma::vec cats, arma::uword p, Rcpp::List model, Rcpp::List modelpars, std::vector<std::string> modeltype, std::vector<std::string> link);
RcppExport SEXP _lamle_mleoptC(SEXP thetaSEXP, SEXP ySEXP, SEXP JSEXP, SEXP catsSEXP, SEXP pSEXP, SEXP modelSEXP, SEXP modelparsSEXP, SEXP modeltypeSEXP, SEXP linkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::uword >::type J(JSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type cats(catsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type model(modelSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type modelpars(modelparsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type modeltype(modeltypeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type link(linkSEXP);
    rcpp_result_gen = Rcpp::wrap(mleoptC(theta, y, J, cats, p, model, modelpars, modeltype, link));
    return rcpp_result_gen;
END_RCPP
}
// dmleoptC
arma::vec dmleoptC(arma::vec theta, arma::vec y, arma::uword J, arma::vec cats, arma::uword p, Rcpp::List model, Rcpp::List modelpars, std::vector<std::string> modeltype, std::vector<std::string> link);
RcppExport SEXP _lamle_dmleoptC(SEXP thetaSEXP, SEXP ySEXP, SEXP JSEXP, SEXP catsSEXP, SEXP pSEXP, SEXP modelSEXP, SEXP modelparsSEXP, SEXP modeltypeSEXP, SEXP linkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::uword >::type J(JSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type cats(catsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type model(modelSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type modelpars(modelparsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type modeltype(modeltypeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type link(linkSEXP);
    rcpp_result_gen = Rcpp::wrap(dmleoptC(theta, y, J, cats, p, model, modelpars, modeltype, link));
    return rcpp_result_gen;
END_RCPP
}
// dhdb
arma::mat dhdb(arma::mat theta, arma::mat sigma, arma::mat betamat, arma::mat x, arma::uword ndim, arma::uword nind);
RcppExport SEXP _lamle_dhdb(SEXP thetaSEXP, SEXP sigmaSEXP, SEXP betamatSEXP, SEXP xSEXP, SEXP ndimSEXP, SEXP nindSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type betamat(betamatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type nind(nindSEXP);
    rcpp_result_gen = Rcpp::wrap(dhdb(theta, sigma, betamat, x, ndim, nind));
    return rcpp_result_gen;
END_RCPP
}
// d2hdtdb
arma::cube d2hdtdb(arma::mat theta, arma::mat sigma, arma::mat betamat, arma::mat x, arma::uword ndim, arma::uword nind);
RcppExport SEXP _lamle_d2hdtdb(SEXP thetaSEXP, SEXP sigmaSEXP, SEXP betamatSEXP, SEXP xSEXP, SEXP ndimSEXP, SEXP nindSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type betamat(betamatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type nind(nindSEXP);
    rcpp_result_gen = Rcpp::wrap(d2hdtdb(theta, sigma, betamat, x, ndim, nind));
    return rcpp_result_gen;
END_RCPP
}
// d2gidz2
arma::cube d2gidz2(arma::vec z, arma::vec apars, arma::vec bpars, std::string modeltype, arma::vec probs, arma::mat dprobs, arma::uword mi, arma::uword p, double y);
RcppExport SEXP _lamle_d2gidz2(SEXP zSEXP, SEXP aparsSEXP, SEXP bparsSEXP, SEXP modeltypeSEXP, SEXP probsSEXP, SEXP dprobsSEXP, SEXP miSEXP, SEXP pSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type apars(aparsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type bpars(bparsSEXP);
    Rcpp::traits::input_parameter< std::string >::type modeltype(modeltypeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dprobs(dprobsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type mi(miSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(d2gidz2(z, apars, bpars, modeltype, probs, dprobs, mi, p, y));
    return rcpp_result_gen;
END_RCPP
}
// dgidu
arma::mat dgidu(arma::vec z, arma::vec apars, arma::vec bpars, std::string modeltype, arma::vec probs, arma::uword mi, arma::uword p, double y);
RcppExport SEXP _lamle_dgidu(SEXP zSEXP, SEXP aparsSEXP, SEXP bparsSEXP, SEXP modeltypeSEXP, SEXP probsSEXP, SEXP miSEXP, SEXP pSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type apars(aparsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type bpars(bparsSEXP);
    Rcpp::traits::input_parameter< std::string >::type modeltype(modeltypeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type mi(miSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(dgidu(z, apars, bpars, modeltype, probs, mi, p, y));
    return rcpp_result_gen;
END_RCPP
}
// d2gidzdu
arma::cube d2gidzdu(arma::vec z, arma::vec apars, arma::vec bpars, std::string modeltype, arma::vec probs, arma::mat dprobs, arma::mat dprobsdu, arma::uword mi, arma::uword p, double y);
RcppExport SEXP _lamle_d2gidzdu(SEXP zSEXP, SEXP aparsSEXP, SEXP bparsSEXP, SEXP modeltypeSEXP, SEXP probsSEXP, SEXP dprobsSEXP, SEXP dprobsduSEXP, SEXP miSEXP, SEXP pSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type apars(aparsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type bpars(bparsSEXP);
    Rcpp::traits::input_parameter< std::string >::type modeltype(modeltypeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dprobs(dprobsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dprobsdu(dprobsduSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type mi(miSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(d2gidzdu(z, apars, bpars, modeltype, probs, dprobs, dprobsdu, mi, p, y));
    return rcpp_result_gen;
END_RCPP
}
// gj_GRM_probit
arma::vec gj_GRM_probit(arma::uword ynj, arma::vec theta, arma::vec apars, arma::vec bpars, arma::uword mj);
RcppExport SEXP _lamle_gj_GRM_probit(SEXP ynjSEXP, SEXP thetaSEXP, SEXP aparsSEXP, SEXP bparsSEXP, SEXP mjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type ynj(ynjSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type apars(aparsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type bpars(bparsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type mj(mjSEXP);
    rcpp_result_gen = Rcpp::wrap(gj_GRM_probit(ynj, theta, apars, bpars, mj));
    return rcpp_result_gen;
END_RCPP
}
// dgjdu_GRM_probit
arma::mat dgjdu_GRM_probit(arma::uword ynj, arma::vec theta, double dpnorm1, double dpnorm2, arma::uword mj, arma::uword pj, arma::uword nparj);
RcppExport SEXP _lamle_dgjdu_GRM_probit(SEXP ynjSEXP, SEXP thetaSEXP, SEXP dpnorm1SEXP, SEXP dpnorm2SEXP, SEXP mjSEXP, SEXP pjSEXP, SEXP nparjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type ynj(ynjSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type dpnorm1(dpnorm1SEXP);
    Rcpp::traits::input_parameter< double >::type dpnorm2(dpnorm2SEXP);
    Rcpp::traits::input_parameter< arma::uword >::type mj(mjSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type pj(pjSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type nparj(nparjSEXP);
    rcpp_result_gen = Rcpp::wrap(dgjdu_GRM_probit(ynj, theta, dpnorm1, dpnorm2, mj, pj, nparj));
    return rcpp_result_gen;
END_RCPP
}
// dgjdt_GRM_probit
arma::mat dgjdt_GRM_probit(arma::vec apars, double dpnorm1, double dpnorm2, arma::uword pj);
RcppExport SEXP _lamle_dgjdt_GRM_probit(SEXP aparsSEXP, SEXP dpnorm1SEXP, SEXP dpnorm2SEXP, SEXP pjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type apars(aparsSEXP);
    Rcpp::traits::input_parameter< double >::type dpnorm1(dpnorm1SEXP);
    Rcpp::traits::input_parameter< double >::type dpnorm2(dpnorm2SEXP);
    Rcpp::traits::input_parameter< arma::uword >::type pj(pjSEXP);
    rcpp_result_gen = Rcpp::wrap(dgjdt_GRM_probit(apars, dpnorm1, dpnorm2, pj));
    return rcpp_result_gen;
END_RCPP
}
// d2gjd2t_GRM_probit
arma::cube d2gjd2t_GRM_probit(arma::uword ynj, arma::vec apars, double linpred1, double linpred2, double dpnorm1, double dpnorm2, arma::uword mj, arma::uword pj);
RcppExport SEXP _lamle_d2gjd2t_GRM_probit(SEXP ynjSEXP, SEXP aparsSEXP, SEXP linpred1SEXP, SEXP linpred2SEXP, SEXP dpnorm1SEXP, SEXP dpnorm2SEXP, SEXP mjSEXP, SEXP pjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type ynj(ynjSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type apars(aparsSEXP);
    Rcpp::traits::input_parameter< double >::type linpred1(linpred1SEXP);
    Rcpp::traits::input_parameter< double >::type linpred2(linpred2SEXP);
    Rcpp::traits::input_parameter< double >::type dpnorm1(dpnorm1SEXP);
    Rcpp::traits::input_parameter< double >::type dpnorm2(dpnorm2SEXP);
    Rcpp::traits::input_parameter< arma::uword >::type mj(mjSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type pj(pjSEXP);
    rcpp_result_gen = Rcpp::wrap(d2gjd2t_GRM_probit(ynj, apars, linpred1, linpred2, dpnorm1, dpnorm2, mj, pj));
    return rcpp_result_gen;
END_RCPP
}
// d3gjd3t_GRM_probit
double d3gjd3t_GRM_probit(arma::uword ynj, arma::vec apars, double linpred1, double linpred2, double dpnorm1, double dpnorm2, arma::uword mj, arma::uword pj);
RcppExport SEXP _lamle_d3gjd3t_GRM_probit(SEXP ynjSEXP, SEXP aparsSEXP, SEXP linpred1SEXP, SEXP linpred2SEXP, SEXP dpnorm1SEXP, SEXP dpnorm2SEXP, SEXP mjSEXP, SEXP pjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type ynj(ynjSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type apars(aparsSEXP);
    Rcpp::traits::input_parameter< double >::type linpred1(linpred1SEXP);
    Rcpp::traits::input_parameter< double >::type linpred2(linpred2SEXP);
    Rcpp::traits::input_parameter< double >::type dpnorm1(dpnorm1SEXP);
    Rcpp::traits::input_parameter< double >::type dpnorm2(dpnorm2SEXP);
    Rcpp::traits::input_parameter< arma::uword >::type mj(mjSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type pj(pjSEXP);
    rcpp_result_gen = Rcpp::wrap(d3gjd3t_GRM_probit(ynj, apars, linpred1, linpred2, dpnorm1, dpnorm2, mj, pj));
    return rcpp_result_gen;
END_RCPP
}
// d4gjd4t_GRM_probit
double d4gjd4t_GRM_probit(arma::uword ynj, arma::vec apars, double linpred1, double linpred2, double dpnorm1, double dpnorm2, arma::uword mj, arma::uword pj);
RcppExport SEXP _lamle_d4gjd4t_GRM_probit(SEXP ynjSEXP, SEXP aparsSEXP, SEXP linpred1SEXP, SEXP linpred2SEXP, SEXP dpnorm1SEXP, SEXP dpnorm2SEXP, SEXP mjSEXP, SEXP pjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type ynj(ynjSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type apars(aparsSEXP);
    Rcpp::traits::input_parameter< double >::type linpred1(linpred1SEXP);
    Rcpp::traits::input_parameter< double >::type linpred2(linpred2SEXP);
    Rcpp::traits::input_parameter< double >::type dpnorm1(dpnorm1SEXP);
    Rcpp::traits::input_parameter< double >::type dpnorm2(dpnorm2SEXP);
    Rcpp::traits::input_parameter< arma::uword >::type mj(mjSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type pj(pjSEXP);
    rcpp_result_gen = Rcpp::wrap(d4gjd4t_GRM_probit(ynj, apars, linpred1, linpred2, dpnorm1, dpnorm2, mj, pj));
    return rcpp_result_gen;
END_RCPP
}
// d5gjd5t_GRM_probit
double d5gjd5t_GRM_probit(arma::uword ynj, arma::vec apars, double linpred1, double linpred2, double dpnorm1, double dpnorm2, arma::uword mj, arma::uword pj);
RcppExport SEXP _lamle_d5gjd5t_GRM_probit(SEXP ynjSEXP, SEXP aparsSEXP, SEXP linpred1SEXP, SEXP linpred2SEXP, SEXP dpnorm1SEXP, SEXP dpnorm2SEXP, SEXP mjSEXP, SEXP pjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type ynj(ynjSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type apars(aparsSEXP);
    Rcpp::traits::input_parameter< double >::type linpred1(linpred1SEXP);
    Rcpp::traits::input_parameter< double >::type linpred2(linpred2SEXP);
    Rcpp::traits::input_parameter< double >::type dpnorm1(dpnorm1SEXP);
    Rcpp::traits::input_parameter< double >::type dpnorm2(dpnorm2SEXP);
    Rcpp::traits::input_parameter< arma::uword >::type mj(mjSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type pj(pjSEXP);
    rcpp_result_gen = Rcpp::wrap(d5gjd5t_GRM_probit(ynj, apars, linpred1, linpred2, dpnorm1, dpnorm2, mj, pj));
    return rcpp_result_gen;
END_RCPP
}
// item_GRM
Rcpp::List item_GRM(arma::uword ynj, arma::vec thetajj, arma::vec aparsjj, arma::vec bparsjj, std::string link, arma::uword mj_jj, arma::uword pj, arma::uword nparj);
RcppExport SEXP _lamle_item_GRM(SEXP ynjSEXP, SEXP thetajjSEXP, SEXP aparsjjSEXP, SEXP bparsjjSEXP, SEXP linkSEXP, SEXP mj_jjSEXP, SEXP pjSEXP, SEXP nparjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type ynj(ynjSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetajj(thetajjSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type aparsjj(aparsjjSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type bparsjj(bparsjjSEXP);
    Rcpp::traits::input_parameter< std::string >::type link(linkSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type mj_jj(mj_jjSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type pj(pjSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type nparj(nparjSEXP);
    rcpp_result_gen = Rcpp::wrap(item_GRM(ynj, thetajj, aparsjj, bparsjj, link, mj_jj, pj, nparj));
    return rcpp_result_gen;
END_RCPP
}
// item_GRM_quad
arma::mat item_GRM_quad(arma::uword ynj, arma::vec thetajj, arma::vec aparsjj, arma::vec bparsjj, std::string link, arma::uword mj_jj, arma::uword pj, arma::uword nparj);
RcppExport SEXP _lamle_item_GRM_quad(SEXP ynjSEXP, SEXP thetajjSEXP, SEXP aparsjjSEXP, SEXP bparsjjSEXP, SEXP linkSEXP, SEXP mj_jjSEXP, SEXP pjSEXP, SEXP nparjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type ynj(ynjSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetajj(thetajjSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type aparsjj(aparsjjSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type bparsjj(bparsjjSEXP);
    Rcpp::traits::input_parameter< std::string >::type link(linkSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type mj_jj(mj_jjSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type pj(pjSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type nparj(nparjSEXP);
    rcpp_result_gen = Rcpp::wrap(item_GRM_quad(ynj, thetajj, aparsjj, bparsjj, link, mj_jj, pj, nparj));
    return rcpp_result_gen;
END_RCPP
}
// item_GRM_3rd
arma::cube item_GRM_3rd(arma::uword ynj, arma::vec thetajj, arma::vec aparsjj, arma::vec bparsjj, std::string link, arma::uword mj_jj, arma::uword pj, arma::uword nparj, arma::vec Pi, bool dt2du);
RcppExport SEXP _lamle_item_GRM_3rd(SEXP ynjSEXP, SEXP thetajjSEXP, SEXP aparsjjSEXP, SEXP bparsjjSEXP, SEXP linkSEXP, SEXP mj_jjSEXP, SEXP pjSEXP, SEXP nparjSEXP, SEXP PiSEXP, SEXP dt2duSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type ynj(ynjSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetajj(thetajjSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type aparsjj(aparsjjSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type bparsjj(bparsjjSEXP);
    Rcpp::traits::input_parameter< std::string >::type link(linkSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type mj_jj(mj_jjSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type pj(pjSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type nparj(nparjSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< bool >::type dt2du(dt2duSEXP);
    rcpp_result_gen = Rcpp::wrap(item_GRM_3rd(ynj, thetajj, aparsjj, bparsjj, link, mj_jj, pj, nparj, Pi, dt2du));
    return rcpp_result_gen;
END_RCPP
}
// tabletolist
Rcpp::List tabletolist(arma::mat estfixpars, arma::uword J, arma::vec mi, Rcpp::List model, std::vector<std::string> modeltype, arma::uword G);
RcppExport SEXP _lamle_tabletolist(SEXP estfixparsSEXP, SEXP JSEXP, SEXP miSEXP, SEXP modelSEXP, SEXP modeltypeSEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type estfixpars(estfixparsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type J(JSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mi(miSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type modeltype(modeltypeSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(tabletolist(estfixpars, J, mi, model, modeltype, G));
    return rcpp_result_gen;
END_RCPP
}
// mglogLGrad
Rcpp::List mglogLGrad(arma::vec pars, arma::mat estfixpars, arma::mat y, arma::mat theta, arma::uword J, arma::vec mi, arma::uword p, Rcpp::List model, std::vector<std::string> modeltype, std::vector<std::string> link, arma::uword N, arma::mat covstruct, arma::uword G, arma::vec group, Rcpp::List filters, arma::mat X, std::string approx, arma::uword accuracy, arma::uvec npartype);
RcppExport SEXP _lamle_mglogLGrad(SEXP parsSEXP, SEXP estfixparsSEXP, SEXP ySEXP, SEXP thetaSEXP, SEXP JSEXP, SEXP miSEXP, SEXP pSEXP, SEXP modelSEXP, SEXP modeltypeSEXP, SEXP linkSEXP, SEXP NSEXP, SEXP covstructSEXP, SEXP GSEXP, SEXP groupSEXP, SEXP filtersSEXP, SEXP XSEXP, SEXP approxSEXP, SEXP accuracySEXP, SEXP npartypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type estfixpars(estfixparsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type J(JSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mi(miSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type modeltype(modeltypeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type link(linkSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covstruct(covstructSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type group(groupSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type filters(filtersSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< std::string >::type approx(approxSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type accuracy(accuracySEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type npartype(npartypeSEXP);
    rcpp_result_gen = Rcpp::wrap(mglogLGrad(pars, estfixpars, y, theta, J, mi, p, model, modeltype, link, N, covstruct, G, group, filters, X, approx, accuracy, npartype));
    return rcpp_result_gen;
END_RCPP
}
// chol_deri
arma::mat chol_deri(arma::mat mat_in);
RcppExport SEXP _lamle_chol_deri(SEXP mat_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type mat_in(mat_inSEXP);
    rcpp_result_gen = Rcpp::wrap(chol_deri(mat_in));
    return rcpp_result_gen;
END_RCPP
}
// mglogLGrad_quad
List mglogLGrad_quad(arma::vec pars, arma::mat estfixpars, arma::mat y, arma::mat theta, arma::uword J, arma::vec mi, arma::uword p, Rcpp::List model, std::vector<std::string> modeltype, std::vector<std::string> link, arma::uword N, arma::mat covstruct, arma::uword G, arma::vec group, Rcpp::List filters, arma::mat X, bool adapt, bool fullexp, arma::mat quadp, arma::vec quadw, std::string method, arma::uvec npartype);
RcppExport SEXP _lamle_mglogLGrad_quad(SEXP parsSEXP, SEXP estfixparsSEXP, SEXP ySEXP, SEXP thetaSEXP, SEXP JSEXP, SEXP miSEXP, SEXP pSEXP, SEXP modelSEXP, SEXP modeltypeSEXP, SEXP linkSEXP, SEXP NSEXP, SEXP covstructSEXP, SEXP GSEXP, SEXP groupSEXP, SEXP filtersSEXP, SEXP XSEXP, SEXP adaptSEXP, SEXP fullexpSEXP, SEXP quadpSEXP, SEXP quadwSEXP, SEXP methodSEXP, SEXP npartypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type estfixpars(estfixparsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type J(JSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mi(miSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type modeltype(modeltypeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type link(linkSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covstruct(covstructSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type group(groupSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type filters(filtersSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type adapt(adaptSEXP);
    Rcpp::traits::input_parameter< bool >::type fullexp(fullexpSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type quadp(quadpSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type quadw(quadwSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type npartype(npartypeSEXP);
    rcpp_result_gen = Rcpp::wrap(mglogLGrad_quad(pars, estfixpars, y, theta, J, mi, p, model, modeltype, link, N, covstruct, G, group, filters, X, adapt, fullexp, quadp, quadw, method, npartype));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_lamle_rcpp_factorial", (DL_FUNC) &_lamle_rcpp_factorial, 1},
    {"_lamle_find_row", (DL_FUNC) &_lamle_find_row, 2},
    {"_lamle_FindUniqComb_jlmr_GLLVM", (DL_FUNC) &_lamle_FindUniqComb_jlmr_GLLVM, 2},
    {"_lamle_FindUniqComb_jlmrst_GLLVM", (DL_FUNC) &_lamle_FindUniqComb_jlmrst_GLLVM, 2},
    {"_lamle_gi", (DL_FUNC) &_lamle_gi, 6},
    {"_lamle_dgidz", (DL_FUNC) &_lamle_dgidz, 8},
    {"_lamle_optC", (DL_FUNC) &_lamle_optC, 14},
    {"_lamle_infoC", (DL_FUNC) &_lamle_infoC, 15},
    {"_lamle_hoptC", (DL_FUNC) &_lamle_hoptC, 11},
    {"_lamle_dhoptC", (DL_FUNC) &_lamle_dhoptC, 11},
    {"_lamle_mleoptC", (DL_FUNC) &_lamle_mleoptC, 9},
    {"_lamle_dmleoptC", (DL_FUNC) &_lamle_dmleoptC, 9},
    {"_lamle_dhdb", (DL_FUNC) &_lamle_dhdb, 6},
    {"_lamle_d2hdtdb", (DL_FUNC) &_lamle_d2hdtdb, 6},
    {"_lamle_d2gidz2", (DL_FUNC) &_lamle_d2gidz2, 9},
    {"_lamle_dgidu", (DL_FUNC) &_lamle_dgidu, 8},
    {"_lamle_d2gidzdu", (DL_FUNC) &_lamle_d2gidzdu, 10},
    {"_lamle_gj_GRM_probit", (DL_FUNC) &_lamle_gj_GRM_probit, 5},
    {"_lamle_dgjdu_GRM_probit", (DL_FUNC) &_lamle_dgjdu_GRM_probit, 7},
    {"_lamle_dgjdt_GRM_probit", (DL_FUNC) &_lamle_dgjdt_GRM_probit, 4},
    {"_lamle_d2gjd2t_GRM_probit", (DL_FUNC) &_lamle_d2gjd2t_GRM_probit, 8},
    {"_lamle_d3gjd3t_GRM_probit", (DL_FUNC) &_lamle_d3gjd3t_GRM_probit, 8},
    {"_lamle_d4gjd4t_GRM_probit", (DL_FUNC) &_lamle_d4gjd4t_GRM_probit, 8},
    {"_lamle_d5gjd5t_GRM_probit", (DL_FUNC) &_lamle_d5gjd5t_GRM_probit, 8},
    {"_lamle_item_GRM", (DL_FUNC) &_lamle_item_GRM, 8},
    {"_lamle_item_GRM_quad", (DL_FUNC) &_lamle_item_GRM_quad, 8},
    {"_lamle_item_GRM_3rd", (DL_FUNC) &_lamle_item_GRM_3rd, 10},
    {"_lamle_tabletolist", (DL_FUNC) &_lamle_tabletolist, 6},
    {"_lamle_mglogLGrad", (DL_FUNC) &_lamle_mglogLGrad, 19},
    {"_lamle_chol_deri", (DL_FUNC) &_lamle_chol_deri, 1},
    {"_lamle_mglogLGrad_quad", (DL_FUNC) &_lamle_mglogLGrad_quad, 22},
    {NULL, NULL, 0}
};

RcppExport void R_init_lamle(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
